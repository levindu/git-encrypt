#!/bin/bash

readonly VERSION="0.3.1"
readonly DEFAULT_CIPHER="aes-256-ecb"

TOP_DIR=$(cd $(dirname $(readlink -f $0)) && pwd)
PASS_PROG=$TOP_DIR/pass
PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR:-$HOME/.password-store}"

load_pass () {
    local ARR
    readarray -t ARR < <($PASS_PROG gitcrypt/$NAME)
    PASS=${ARR[0]}
    SALT=${ARR[1]}
    CIPHER=${ARR[2]}
}

save_pass () {
    $PASS_PROG insert -m -f -q gitcrypt/$NAME <<EOF
$PASS
$SALT
$CIPHER
EOF
}

init_config() {
	local answer skip_gen

	if [ ! -d ".git" ]; then
		echo "Directory is not a git repository. Did you forget to run 'git init'?"
		return 1
	fi

	while [ -z "$NAME" ]; do
		echo -n "Enter name: "
		read NAME
        if [ -f ${PASSWORD_STORE_DIR}/gitcrypt/$NAME.gpg ]; then
            echo -n "Password for $NAME exists, use it? [Y/n]"
			read answer
			case "$answer" in
				n*|N*)
                    echo "You can remove ${PASSWORD_STORE_DIR}/gitcrypt/$NAME.gpg in order to create it."
                    unset NAME
					;;
				*)
                    skip_gen=1
					;;
			esac
        fi
	done
    git config gitcrypt.name $NAME
    if [ -z "$skip_gen" ]; then
        gen_pass
        save_pass
    fi
    create_git_conf
}

gen_pass () {
	while [ 1 ]; do
		while [ -z "$SALT" ]; do
			echo -n "Generate a random salt? [Y/n] "
			read answer

			case "$answer" in
				n*|N*)
					echo -n "Shared salt as hex characters: "
					read SALT

					if [ $(echo "$SALT" | grep '[^a-f0-9]' | wc -l) -ne 0 ]; then
						echo "Error: non-hex characters in salt"
						unset -v SALT
					fi
					;;
				*)
					local md5=$(which md5 2>/dev/null || which md5sum 2>/dev/null)
					SALT=$(head -c 10 < /dev/random | $md5 | cut -c-16)
					;;
			esac
		done

		while [ -z "$SKIP_GEN" -a -z "$PASS" ]; do
			echo -n "Generate a random password? [Y/n]"
			read answer

			case "$answer" in
				n*|N*)
					echo -n "Enter your passphrase: "
					read PASS
					;;
				*)
					PASS=$(cat /dev/urandom | LC_ALL="C" tr -dc '!@#$%^&*()_A-Z-a-z-0-9' | head -c32)
					;;
			esac
		done

		while [ -z "$SKIP_GEN" ]; do
			echo -n "What encryption cipher do you want to use? [$DEFAULT_CIPHER] "
			read CIPHER
			[ -z "$CIPHER" ] && CIPHER="$DEFAULT_CIPHER"

			local exists
			exists=$(openssl list-cipher-commands | grep "$CIPHER")
			[ $? -eq 0 ] && break

			echo "Error: Cipher '$CIPHER' is not available"
		done

		echo -e "\nThis configuration will be stored:\n"
		echo "salt:   $SALT"
		echo "pass:   $PASS"
		echo "cipher: $CIPHER"
		echo -e -n "\nDoes this look right? [Y/n] "
		read answer

		case "$answer" in
			n*|N*)
				# Reconfigure
				unset -v SALT
				unset -v PASS
				unset -v CIPHER
				;;
			*)
				# Finished
				break
				;;
		esac
	done
}

create_git_conf () {
	echo -n "Do you want to use .git/info/attributes? [Y/n] "
	read answer

	local attrs
	case "$answer" in
		n*|N*)
			attrs=".gitattributes"
			;;
		*)
			attrs=".git/info/attributes"
			;;
	esac

	local pattern
	echo -n "What files do you want encrypted? [*] "
	read pattern
	[ -z "$pattern" ] && pattern="*"

	echo "$pattern filter=encrypt diff=encrypt" >> $attrs
	echo "[merge]" >> $attrs
	echo "    renormalize=true" >> $attrs

	# Filters
	git config filter.encrypt.smudge "gitcrypt smudge"
	git config filter.encrypt.clean "gitcrypt clean"
	git config diff.encrypt.textconv "gitcrypt diff"
}

_clean() {
	# Encrypt using OpenSSL
	openssl enc -base64 -$CIPHER -S "$SALT" -k "$PASS"
}

_smudge() {
	# If decryption fails, use `cat` instead
	openssl enc -d -base64 -$CIPHER -k "$PASS" 2> /dev/null || cat
}

_diff() {
	# If decryption fails, use `cat` instead
	openssl enc -d -base64 -$CIPHER -k "$PASS" -in "$1" 2> /dev/null || cat "$1"
}

case "$1" in
	clean|smudge|diff)
        NAME=$(git config gitcrypt.name)
        load_pass
		# Need a shared salt
		if [ -z "$SALT" ]; then
			echo "Gitcrypt: shared salt (gitcrypt.salt) has not been configured"
			exit 1
		fi

		# Need a secure passphrase
		if [ -z "$PASS" ]; then
			echo "Gitcrypt: secure passphrase (gitcrypt.pass) has not been configured"
			exit 1
		fi

		# And a cipher mode
		[ -z "$CIPHER" ] && CIPHER="$DEFAULT_CIPHER"

		# Execute command
		_$1 "$2"
		;;
	init)
		# Run setup commands
		init_config
		;;
	rm)
        if [ -z "$2" ]; then
            echo "gitcrypt rm <NAME>"
            exit 1
        fi
		$PASS_PROG rm gitcrypt/$2
		;;
    ls)
        $PASS_PROG ls gitcrypt
        ;;
	version)
		# Show version
		echo "gitcrypt version $VERSION"
		;;
	*)
		# Not a valid option
    if [ -z "$1" ]; then
      echo "Gitcrypt: available options: init, version, ls, rm"
    else
		  echo "Gitcrypt: command does not exist: $1"
    fi
		exit 1
		;;
esac
exit 0
